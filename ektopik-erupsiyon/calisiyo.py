# -*- coding: utf-8 -*-
"""ara proje.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zRWgg_mEdZ6mkw1lBhHlq4-42MLqvG9o
"""



# from google.colab import drive
# drive.mount('/gdrive/', force_remount=True)
# %cd "/gdrive/MyDrive/ektopik-erupsiyon-bilal-dogukan"
# #!yes|pip uninstall tensorflow
# #!sudo apt-get install python3.7
# %pip install -r dependencies.txt
# #%pip install -U scikit-image==0.16.2
# import sys
# sys.path.append('/gdrive/MyDrive/ektopik-erupsiyon-bilal-dogukan')
# %ls

# Commented out IPython magic to ensure Python compatibility.

#Uninstall the current CUDA version
# !apt-get --purge remove cuda nvidia* libnvidia-*
# !dpkg -l | grep cuda- | awk '{print $2}' | xargs -n1 dpkg --purge
# !apt-get remove cuda-*
# !apt autoremove
# !apt-get update

# #Download CUDA 10.0
# !wget  --no-clobber https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-repo-ubuntu1804_10.0.130-1_amd64.deb
# #install CUDA kit dpkg
# !dpkg -i cuda-repo-ubuntu1804_10.0.130-1_amd64.deb
# !sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
# # !apt-get update
# # !apt-get install cuda-10-0
# # %cd "/gdrive/MyDrive/ektopik-erupsiyon-bilal-dogukan"

# import sys
# sys.path.append('/gdrive/MyDrive/ektopik-erupsiyon-bilal-dogukan')




import tensorflow as tf

print("Num GPUs Available: ", len(tf.config.list_physical_devices('GPU')))

# Creates a session with device placement logs
config=tf.compat.v1.ConfigProto(log_device_placement=True)
config.gpu_options.allow_growth = True
sess = tf.compat.v1.Session(config=config)
print(sess)

# GPU for training.
DEVICE = "/gpu:0"  # /cpu:0 or /gpu:0

# Commented out IPython magic to ensure Python compatibility.
# %ls
import warnings
warnings.filterwarnings('ignore')
import os
import sys
import json
import datetime
import numpy as np
import skimage.draw
import cv2
import random
import math
import re
import time
#import tensorflow as tf
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.image as mpimg


sys.path.append(r"C:\Users\doguk\Desktop\araproje\ektopik-erupsiyon-bilal-dogukan\mrcnn")  # To find local version of the library
print(os.listdir())
from mrcnn import utils
from matplotlib.figure import Figure 
from mrcnn import visualize
from mrcnn.visualize import display_images
from mrcnn.visualize import display_instances
from tensorflow import keras
import mrcnn.model as modellib
from mrcnn.model import log
from mrcnn.config import Config
from mrcnn import model as modellib, utils
from keras import models    
model = models.Sequential()

# Root directory of the project
#ROOT_DIR = "D:\MRCNN_tensorflow2.7_env\Mask-RCNN"
ROOT_DIR = os.getcwd()

# Import Mask RCNN
sys.path.append(ROOT_DIR)  # To find local version of the library


# Path to trained weights file
COCO_WEIGHTS_PATH = os.path.join(r"C:\Users\doguk\Desktop\araproje\ektopik-erupsiyon-bilal-dogukan\ektopik-erupsiyon", "mask_rcnn_coco.h5")
print(os.path.isfile(COCO_WEIGHTS_PATH ))
print("pathr")

# Directory to save logs and model checkpoints, if not provided
# through the command line argument --logs
DEFAULT_LOGS_DIR = os.path.join(ROOT_DIR, "logs")

# import os
# import json

# # Klasördeki JSON dosyalarını bulun
# klasor_yolu = 'ektopik-erupsiyon/dataset/val/val-json'  # Klasörünüzün yolunu buraya girin
# json_verileri = []

# for dosya in os.listdir(klasor_yolu):
#     if dosya.endswith('.json'):
#         with open(os.path.join(klasor_yolu, dosya), 'r') as dosya_oku:
#             veri = json.load(dosya_oku)
#             json_verileri.append(veri)

# # JSON verilerini birleştirin
# birlesik_json = json.dumps(json_verileri)

# # Birleştirilmiş JSON'u yeni bir dosyaya yazın
# with open('ektopik-erupsiyon/dataset/val/val-json/birlesik_veri.json', 'w') as cikti_dosyasi:
#     cikti_dosyasi.write(birlesik_json)

class CustomConfig(Config):
    """Configuration for training on the custom  dataset.
    Derives from the base Config class and overrides some values.
    """
    # Give the configuration a recognizable name
    NAME = "object"


    # NUMBER OF GPUs to use. When using only a CPU, this needs to be set to 1.
    GPU_COUNT = 1

    # We use a GPU with 12GB memory, which can fit two images.
    # Adjust down if you use a smaller GPU.
    IMAGES_PER_GPU = 1

    # Number of classes (including background)
    NUM_CLASSES = 1 + 8  # Background + Hard_hat, Safety_vest

    # Number of training steps per epoch
    STEPS_PER_EPOCH = 10

    # Skip detections with < 90% confidence
    DETECTION_MIN_CONFIDENCE = 0.9

# Commented out IPython magic to ensure Python compatibility.
# %pip install unidecode

import re


class CustomDataset(utils.Dataset):
  
        

    def load_custom(self, dataset_dir, subset):
        self.curr_count=0
        """Load a subset of the Dog-Cat dataset.
        dataset_dir: Root directory of the dataset.
        subset: Subset to load: train or val
        """
        # Add classes. We have only one class to add.

        # Add classes. We have only one class to add.
        self.add_class("object", 1, "55")
        self.add_class("object", 2, "65")
        self.add_class("object", 3, "75")
        self.add_class("object", 4, "85")
        self.add_class("object", 5, "16")
        self.add_class("object", 6, "26")
        self.add_class("object", 7, "36")
        self.add_class("object", 8, "46")

        print("deneme deneme deneme deneme deneme deneme deneme\n")

        # Train or validation dataset?
        assert subset in ["train", "val"]
        dataset_dir = os.path.join(dataset_dir, subset)

        # We mostly care about the x and y coordinates of each region
        annotations1 = json.load(open(rf'dataset/{subset}/{subset}-json/birlesik_veri.json'))
        #print(annotations1[0:100])
        annotations = list(annotations1)  # don't need the dict keys
        #print(annotations[0:100])
        # The VIA tool saves images in the JSON even if they don't have any
        # annotations. Skip unannotated images.
        annotations = [a for a in annotations if a['outputs']['object']]
        print("json okuma basladi")
    
        # Add images
        for a in annotations:
          
            # print(a)
            # Get the x, y coordinaets of points of the polygons that make up
            # the outline of each object instance. There are stores in the
            # shape_attributes (see json format above)
            polygons = [r['polygon'] for r in a['outputs']['object']]
            objects = [s['name'] for s in a['outputs']['object']]
            #print("objects:",objects)
            name_dict = {"55": 1,"65": 2,"75":3,"85":4,"16":5,"26":6,"36":7,"46":8}

            # key = tuple(name_dict)
            num_ids = [name_dict[a] for a in objects]

            #print("numids",num_ids)

            parcalar = a['path'].split("\\")
            # En sondaki parçayı alarak resim ismini elde edin
            resim_ismi = parcalar[-1]

           # print(resim_ismi)
            #print("a")
            image_path = os.path.join(dataset_dir, resim_ismi)
            #print("b")
            #print(image_path)
             # Example usage
            old_path = image_path
            
            #print(new_path)
            image = skimage.io.imread(image_path)
            # Encode file path with UTF-8 and escape spaces
            # encoded_filepath = image_path.encode('utf-8')
            # encoded_filepath = encoded_filepath.replace(b' ', b'\ ')

            # # Convert bytes back to string
            # encoded_filepath_str = encoded_filepath.decode('utf-8')

            # # Check if the file exists
            # if os.path.exists(encoded_filepath_str):
            #     # Now you can safely read the image file using skimage.io.imread()
            #     image = skimage.io.imread(encoded_filepath_str)
            # else:
            #   print(encoded_filepath_str)


            #print("c")
            height, width = image.shape[:2]
            #print("d")
            self.add_image(
                "object",  ## for a single class just add the name here
                image_id= resim_ismi,  # use file name as a unique image id
                path=image_path,
                width=width, height=height,
                polygons=polygons,
                num_ids=num_ids
                )
      

    def load_mask(self, image_id):
        self.curr_count=self.curr_count+1
        """Generate instance masks for an image.
       Returns:<<<<
        masks: A bool array of shape [height, width, instance count] with
            one mask per instance.
        class_ids: a 1D array of class IDs of the instance masks.
        """
        # If not a Dog-Cat dataset image, delegate to parent class.
        image_info = self.image_info[image_id]
        if image_info["source"] != "object":
            return super(self.__class__, self).load_mask(image_id)
        
        # Convert polygons to a bitmap mask of shape
        # [height, width, instance_count]
        info = self.image_info[image_id]
        print(info["path"])
        if info["source"] != "object":
            print("err")
            return super(self.__class__, self).load_mask(image_id)
        num_ids = info['num_ids']
        mask = np.zeros([info["height"], info["width"], len(info["polygons"])],
                        dtype=np.uint8)
        
        #print(info["polygons"])
        
        #print(listOfX)
        # print(info["polygons"])
        # print("\ninf[0]\n")
        # print(info["polygons"][0])
        # print(len(elx1)==len(info["polygons"]))
        # print("counter:",self.curr_count)
        for i, p in enumerate(info["polygons"]):
            listOfX= [v for k,v in info["polygons"][i].items() if 'x' in k]
        
            listOfY= [v for k,v in info["polygons"][i].items() if 'y' in k]
          
            # Get indexes of pixels inside the polygon and set them to 1

            ##mask[rr, cc, i] means 
            rr, cc = skimage.draw.polygon(listOfY, listOfX)
            mask[rr, cc, i] = 1        

        # Return mask, and array of class IDs of each instance. Since we have
        # one class ID only, we return an array of 1s
        # Map class names to class IDs.
        num_ids = np.array(num_ids, dtype=np.int32)
        print("return made")
        return mask, num_ids #np.ones([mask.shape[-1]], dtype=np.int32)

    def image_reference(self, image_id):
        """Return the path of the image."""
        info = self.image_info[image_id]
        if info["source"] == "object":
            return info["path"]
        else:
            super(self.__class__, self).image_reference(image_id)

def train(model):
    
    """Train the model."""
    # Training dataset.
    dataset_train = CustomDataset()
    dataset_train.load_custom("dataset/", "train")
    print("PREPAREDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\\n\n\n\n")
    dataset_train.prepare()
    print("Train dataset\n")
    # Validation dataset
    dataset_val = CustomDataset()
    dataset_val.load_custom("dataset/", "val")
    dataset_val.prepare()
    print("Test dataset\n")
    # *** This training schedule is an example. Update to your needs ***
    # Since we're using a very small dataset, and starting from
    # COCO trained weights, we don't need to train too long. Also,
    # no need to train all layers, just the heads should do it.

    # print("Training network heads")
    model.train(dataset_train, dataset_val,
                learning_rate=config.LEARNING_RATE,
                epochs=10,
                layers='heads')
    return dataset_val and dataset_train
    return dataset_val,dataset_train
    
print(os.getcwd())
os.listdir('dataset/train/')

config = CustomConfig()
model = modellib.MaskRCNN(mode="training", config=config,
                                  model_dir=DEFAULT_LOGS_DIR)

weights_path = COCO_WEIGHTS_PATH
        # Download weights file
if not os.path.exists(weights_path):
  utils.download_trained_weights(weights_path)
print("i")
model.load_weights(weights_path, by_name=True, exclude=[
            "mrcnn_class_logits", "mrcnn_bbox_fc",
            "mrcnn_bbox", "mrcnn_mask"])
print("j")

dataset_val,dataset_train=train(model)
class InferenceConfig(CustomConfig):
    GPU_COUNT = 1
    IMAGES_PER_GPU = 1
    #Minimum probability value to accept a detected instance
    # ROIs below this threshold are skipped
    DETECTION_MIN_CONFIDENCE = 0.7

    # Non-maximum suppression threshold for detection
    DETECTION_NMS_THRESHOLD = 0.3

inference_config = InferenceConfig()

# Recreate the model in inference mode
model = modellib.MaskRCNN(mode="inference",
                          config=inference_config,
                          model_dir=DEFAULT_LOGS_DIR)

# Get path to saved weights
# Either set a specific path or find last trained weights
# model_path = os.path.join(ROOT_DIR, ".h5 file name here")


#model_path = model.find_last()
model_path = 'logs/object20240329T0402/mask_rcnn_object_0010.h5'


# Load trained weights
print("Loading weights from ", model_path)
model.load_weights(model_path, by_name=True)

# # Test on a random image
# image_id = random.choice(dataset_val.image_ids)
# original_image, image_meta, gt_class_id, gt_bbox, gt_mask =\
#     modellib.load_image_gt(dataset_val, inference_config,
#                            image_id)

# log("original_image", original_image)
# log("image_meta", image_meta)
# log("gt_class_id", gt_class_id)
# log("gt_bbox", gt_bbox)
# log("gt_mask", gt_mask)

# visualize.display_instances(original_image, gt_bbox, gt_mask, gt_class_id,
#                             dataset_train.class_names, figsize=(8, 8))

image_id = random.choice(dataset_val.image_ids)
image, image_meta, gt_class_id, gt_bbox, gt_mask =\
    modellib.load_image_gt(dataset_val, config, image_id)
info = dataset_val.image_info[image_id]
print("image ID: {}.{} ({}) {}".format(info["source"], info["id"], image_id, 
                                       dataset_val.image_reference(image_id)))

results = model.detect([image], verbose=1)
def get_ax(rows=1, cols=1, size=16):
    """Return a Matplotlib Axes array to be used in
    all visualizations in the notebook. Provide a
    central point to control graph sizes.
    
    Adjust the size attribute to control how big to render images
    """
    _, ax = plt.subplots(rows, cols, figsize=(size*cols, size*rows))
    return ax
ax = get_ax(1)
r = results[0]
print(r)
visualize.display_instances(image, r['rois'], r['masks'], r['class_ids'], 
                            dataset_val.class_names, r['scores'], ax=ax,
                            title="Predictions")
log("gt_class_id", gt_class_id)
log("gt_bbox", gt_bbox)
log("gt_mask", gt_mask)
display_images(np.transpose(gt_mask, [2, 0, 1]), cmap="Blues")
